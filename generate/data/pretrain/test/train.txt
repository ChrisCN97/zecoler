language : python . def format_filename ( filename , shorten = False ) : if shorten : filename = os . path . basename ( filename ) return filename_to_ui ( filename )
language : javascript . function ( _chain ) { for ( var i = 0 , l = _chain . length ; i < l ; i ++ ) { this . mixin ( _chain [ i ] ) ; } }
language : go . func MakeBlock ( height int64 , txs [ ] Tx , lastCommit * Commit , evidence [ ] Evidence ) * Block { block := & Block { Header : Header { Height : height , NumTxs : int64 ( len ( txs ) ) , } , Data : Data { Txs : txs , } , Evidence : EvidenceData { Evidence : evidence } , LastCommit : lastCommit , } \n block . fillHeader ( ) \n return block \n }
language : python . def editprojecthook ( self , project_id , hook_id , url , push = False , issues = False , merge_requests = False , tag_push = False ) : data = { "id" : project_id , "hook_id" : hook_id , "url" : url , 'push_events' : int ( bool ( push ) ) , 'issues_events' : int ( bool ( issues ) ) , 'merge_requests_events' : int ( bool ( merge_requests ) ) , 'tag_push_events' : int ( bool ( tag_push ) ) , } request = requests . put ( '{0}/{1}/hooks/{2}' . format ( self . projects_url , project_id , hook_id ) , headers = self . headers , data = data , verify = self . verify_ssl , auth = self . auth , timeout = self . timeout ) if request . status_code == 200 : return True else : return False
language : go . func ( mg * MailgunImpl ) DeleteDomainIP ( ctx context . Context , ip string ) error { r := newHTTPRequest ( generatePublicApiUrl ( mg , domainsEndpoint ) + "/" + mg . domain + "/ips/" + ip ) \n r . setClient ( mg . Client ( ) ) \n r . setBasicAuth ( basicAuthUser , mg . APIKey ( ) ) \n _ , err := makeDeleteRequest ( ctx , r ) \n return err \n }
language : python . def close_process_handles ( self ) : for pid in self . get_process_ids ( ) : aProcess = self . get_process ( pid ) try : aProcess . close_handle ( ) except Exception : e = sys . exc_info ( ) [ 1 ] try : msg = "Cannot close process handle %s, reason: %s" msg %= ( aProcess . hProcess . value , str ( e ) ) warnings . warn ( msg ) except Exception : pass
language : python . def _make_reserved_tokens_re ( reserved_tokens ) : if not reserved_tokens : return None escaped_tokens = [ _re_escape ( rt ) for rt in reserved_tokens ] pattern = "(%s)" % "|" . join ( escaped_tokens ) reserved_tokens_re = _re_compile ( pattern ) return reserved_tokens_re
language : ruby . def list_operations_next ( next_page_link , custom_headers : nil ) response = list_operations_next_async ( next_page_link , custom_headers : custom_headers ) . value! response . body unless response . nil? end
language : php . protected function submitCartItemsCheckout ( ) { $ items = $ this -> getSubmitted ( 'cart.items' ) ; if ( empty ( $ items ) ) { return null ; } $ errors = array ( ) ; foreach ( $ items as $ sku => $ item ) { $ errors += $ this -> validateCartItemCheckout ( $ sku , $ item ) ; if ( empty ( $ errors ) ) { $ this -> updateCartQuantityCheckout ( $ sku , $ item ) ; } } if ( empty ( $ errors ) ) { $ this -> setSubmitted ( 'cart.action.update' , true ) ; } else { $ this -> setMessageFormCheckout ( 'cart.danger' , $ errors ) ; } }
language : python . def set ( self , time_sec , callback_fn , * args , ** kwdargs ) : timer = self . timer ( ) timer . set_callback ( 'expired' , callback_fn , * args , ** kwdargs ) timer . set ( time_sec ) return timer
language : php . public function install ( & $ transport , $ options ) { $ parentObj = null ; $ parentMeta = null ; $ installed = $ this -> _installObject ( $ transport , $ options , $ this -> payload , $ parentObj , $ parentMeta ) ; return $ installed ; }
language : php . public function childrenOf ( ChildCategory $ category ) { return $ this -> descendantsOf ( $ category ) -> addUsingAlias ( ChildCategory :: LEVEL_COL , $ category -> getLevel ( ) + 1 , Criteria :: EQUAL ) ; }
language : javascript . function isFullscreen ( ) { return document . fullScreenElement || document . webkitFullscreenElement || document . mozFullScreenElement || document . msFullscreenElement || isFakeFullscreen ; }
language : php . static function executeCommand ( $ command ) { exec ( $ command , $ output , $ resultCode ) ; if ( $ resultCode > 0 ) { $ output = implode ( "\n" , $ output ) ; throw new Exception ( "Failed to execute command: '$command' with output: '$output' " ) ; } }
language : go . func ( c * linuxContainer ) orderNamespacePaths ( namespaces map [ configs . NamespaceType ] string ) ( [ ] string , error ) { paths := [ ] string { } \n for _ , ns := range configs . NamespaceTypes ( ) { if ! c . config . Namespaces . Contains ( ns ) { continue \n } \n if p , ok := namespaces [ ns ] ; ok && p != "" { if ! configs . IsNamespaceSupported ( ns ) { return nil , newSystemError ( fmt . Errorf ( "namespace %s is not supported" , ns ) ) \n } \n if _ , err := os . Lstat ( p ) ; err != nil { return nil , newSystemErrorWithCausef ( err , "running lstat on namespace path %q" , p ) \n } \n if strings . ContainsRune ( p , ',' ) { return nil , newSystemError ( fmt . Errorf ( "invalid path %s" , p ) ) \n } \n paths = append ( paths , fmt . Sprintf ( "%s:%s" , configs . NsName ( ns ) , p ) ) \n } \n } \n return paths , nil \n }
language : javascript . function ( ) { if ( ! this . _boundElement ) { return false ; } var el = this . _boundElement ; el . removeEventListener ( 'mousemove' , this ) ; el . removeEventListener ( 'mouseenter' , this ) ; el . removeEventListener ( 'mouseleave' , this ) ; el . removeEventListener ( 'click' , this ) ; }
language : php . static function IsAfter ( LogItem $ lhs = null , LogItem $ rhs = null ) { if ( ! $ lhs ) { return false ; } if ( ! $ rhs ) { return true ; } return $ lhs -> GetChanged ( ) -> IsAfter ( $ rhs -> GetChanged ( ) ) ; }
language : go . func ( v * Value ) negate ( ) { switch v . vType { case typeFloat : v . value = - ( v . value . ( float64 ) ) \n case typeInt : v . value = - ( v . value . ( int64 ) ) \n } \n }
language : javascript . async function querySheetInfo ( sheetId ) { var key = util . createIdentifier ( 'sheet_info' , sheetId ) ; return await fetchData ( key , api . converter . sheetInfoResponse , ( ) => executeRequest ( 'sheet_info' , { sheetId : sheetId } ) ) ; }
language : python . def calc_variance ( grad_dict , num_batches , param_names ) : for i in range ( len ( param_names ) ) : diff_sqr = mx . ndarray . square ( mx . nd . subtract ( grad_dict [ param_names [ i ] ] , grad_dict [ str . format ( param_names [ i ] + "_expectation" ) ] ) ) grad_dict [ str . format ( param_names [ i ] + "_variance" ) ] = mx . ndarray . sum ( diff_sqr , axis = 0 ) / num_batches
language : java . public Connector [ ] getConnectors ( ) { if ( connectors != null ) { return Arrays . copyOf ( connectors , connectors . length ) ; } else { return new Connector [ ] { } ; } }
language : php . public static function isPast ( $ timestamp , $ leeway = 0 ) { $ timestamp = static :: timestamp ( $ timestamp ) ; return $ leeway > 0 ? $ timestamp -> addSeconds ( $ leeway ) -> isPast ( ) : $ timestamp -> isPast ( ) ; }
language : go . func getNewJoinKeysByOffsets ( oldJoinKeys [ ] * expression . Column , offsets [ ] int ) [ ] * expression . Column { newKeys := make ( [ ] * expression . Column , 0 , len ( oldJoinKeys ) ) \n for _ , offset := range offsets { newKeys = append ( newKeys , oldJoinKeys [ offset ] ) \n } \n for pos , key := range oldJoinKeys { isExist := false \n for _ , p := range offsets { if p == pos { isExist = true \n break \n } \n } \n if ! isExist { newKeys = append ( newKeys , key ) \n } \n } \n return newKeys \n }
language : go . func ( in * KubernetesMasterConfig ) DeepCopy ( ) * KubernetesMasterConfig { if in == nil { return nil \n } \n out := new ( KubernetesMasterConfig ) \n in . DeepCopyInto ( out ) \n return out \n }
language : go . func ( s * APIServer ) getRemoteClusters ( auth ClientI , w http . ResponseWriter , r * http . Request , p httprouter . Params , version string ) ( interface { } , error ) { clusters , err := auth . GetRemoteClusters ( ) \n if err != nil { return nil , trace . Wrap ( err ) \n } \n items := make ( [ ] json . RawMessage , len ( clusters ) ) \n for i , cluster := range clusters { data , err := services . MarshalRemoteCluster ( cluster , services . WithVersion ( version ) , services . PreserveResourceID ( ) ) \n if err != nil { return nil , trace . Wrap ( err ) \n } \n items [ i ] = data \n } \n return items , nil \n }
language : go . func ( l * List ) Supports ( capability Capability ) bool { _ , ok := l . m [ capability ] \n return ok \n }
language : java . private static int parseTagString ( String localeID , String tags [ ] ) { LocaleIDParser parser = new LocaleIDParser ( localeID ) ; String lang = parser . getLanguage ( ) ; String script = parser . getScript ( ) ; String region = parser . getCountry ( ) ; if ( isEmptyString ( lang ) ) { tags [ 0 ] = UNDEFINED_LANGUAGE ; } else { tags [ 0 ] = lang ; } if ( script . equals ( UNDEFINED_SCRIPT ) ) { tags [ 1 ] = "" ; } else { tags [ 1 ] = script ; } if ( region . equals ( UNDEFINED_REGION ) ) { tags [ 2 ] = "" ; } else { tags [ 2 ] = region ; } String variant = parser . getVariant ( ) ; if ( ! isEmptyString ( variant ) ) { int index = localeID . indexOf ( variant ) ; return index > 0 ? index - 1 : index ; } else { int index = localeID . indexOf ( '@' ) ; return index == - 1 ? localeID . length ( ) : index ; } }
language : php . public static function getDefaultChain ( ClientInterface $ client ) { $ factories = array ( ) ; if ( $ description = $ client -> getDescription ( ) ) { $ factories [ ] = new ServiceDescriptionFactory ( $ description ) ; } $ factories [ ] = new ConcreteClassFactory ( $ client ) ; return new static ( $ factories ) ; }
language : php . public function isFieldModified ( $ name ) { return isset ( $ this -> fieldsModified [ $ name ] ) || array_key_exists ( $ name , $ this -> fieldsModified ) ; }
language : go . func ( b * Broadcaster ) handleBroadcastReq ( req * broadcastReq ) error { err := b . cfg . Broadcast ( req . tx ) \n if err != nil && ! IsBroadcastError ( err , Mempool ) { log . Errorf ( "Broadcast attempt failed: %v" , err ) \n return err \n } \n b . transactions [ req . tx . TxHash ( ) ] = req . tx \n return nil \n }
language : php . public function setOption ( $ option , array $ properties ) { if ( ! is_a ( $ option , Option :: class ) && ! Option :: isValid ( $ option ) ) { throw new ConfigurationException ( "Invalid configuration option '$option'" , ConfigurationException :: TOOL_PROVIDER ) ; } else { $ this -> options [ ( string ) $ option ] = $ properties ; } }
language : java . private void flushCharactersBuffer ( ) throws IOException { if ( charactersBuffer . position ( ) > 0 ) { writer . write ( charactersBuffer . array ( ) , 0 , charactersBuffer . position ( ) ) ; charactersBuffer . rewind ( ) ; } }
language : go . func ( nr * NewRelic ) ExternalSegment ( url string ) Segment { return NewRelicExternalSegment { newrelic . ExternalSegment { StartTime : newrelic . StartSegmentNow ( nr . txn ) , URL : url , } , } \n }
language : php . public function isRequestValid ( HttpRequest $ request , AuthenticationData $ data , $ secretKey ) { return $ this -> getScheme ( $ data -> getScheme ( ) ) -> isRequestValid ( $ request , $ data -> getToken ( ) , $ secretKey ) ; }
language : php . public function setOption ( $ name , $ value ) { $ this -> assertOptionName ( $ name ) ; $ this -> options [ $ name ] = $ value ; return $ this ; }
language : python . def _encode ( data ) : if not isinstance ( data , bytes_types ) : data = six . b ( str ( data ) ) return base64 . b64encode ( data ) . decode ( "utf-8" )
language : java . public static String [ ] removeDuplicateStrings ( String [ ] array ) { if ( isEmpty ( array ) ) { return array ; } Set < String > set = new TreeSet < String > ( ) ; Collections . addAll ( set , array ) ; return toStringArray ( set ) ; }
language : php . public function addSearchInputItem ( $ placeHolder = NULL , $ icon = NULL ) { return $ this -> addItem ( HtmlDropdownItem :: searchInput ( $ placeHolder , $ icon ) ) ; }
language : java . private static WritingThread createWritingThread ( final Collection < Writer > [ ] [ ] matrix ) { Collection < Writer > writers = getAllWriters ( matrix ) ; WritingThread thread = new WritingThread ( writers ) ; thread . start ( ) ; return thread ; }
language : java . private String hashPasswordForShiro ( ) { HashFormatFactory HASH_FORMAT_FACTORY = new DefaultHashFormatFactory ( ) ; SecureRandomNumberGenerator generator = new SecureRandomNumberGenerator ( ) ; int byteSize = 128 / 8 ; ByteSource salt = generator . nextBytes ( byteSize ) ; SimpleHash hash = new SimpleHash ( "SHA-256" , password , salt , 10 ) ; HashFormat format = HASH_FORMAT_FACTORY . getInstance ( "shiro1" ) ; return format . format ( hash ) ; }
language : php . private function setDefaults ( Map $ map ) { foreach ( $ this -> getParsedData ( ) as $ name => $ value ) { if ( in_array ( $ name , $ this -> defaults ) ) { $ map -> $ name ( $ value ) ; } } }
language : java . Pair < ExecutionReference , ExecutableFlow > fetchActiveFlowByExecId ( final int execId ) throws ExecutorManagerException { try { return this . dbOperator . query ( FetchActiveExecutableFlow . FETCH_ACTIVE_EXECUTABLE_FLOW_BY_EXEC_ID , new FetchActiveExecutableFlow ( ) , execId ) ; } catch ( final SQLException e ) { throw new ExecutorManagerException ( "Error fetching active flow by exec id" + execId , e ) ; } }
language : python . def map_metabolites_to_structures ( metabolites , compartments ) : unique_identifiers = [ "inchikey" , "inchi" ] met2mol = { } molecules = { c : [ ] for c in compartments } for met in metabolites : ann = [ ] for key in unique_identifiers : mol = met . annotation . get ( key ) if mol is not None : ann . append ( mol ) if len ( ann ) == 0 : continue ann = set ( ann ) mols = molecules [ met . compartment ] for i , mol_group in enumerate ( mols ) : if len ( ann & mol_group ) > 0 : mol_group . update ( ann ) met2mol [ met ] = "{}-{}" . format ( met . compartment , i ) break if met not in met2mol : met2mol [ met ] = "{}-{}" . format ( met . compartment , len ( mols ) ) mols . append ( ann ) return met2mol
language : python . def unalter_zero_tip_joint_states ( tree , feature , state2index ) : lh_joint_state_feature = get_personalized_feature_name ( feature , BU_LH_JOINT_STATES ) for tip in tree : if tip . dist > 0 : continue state = getattr ( tip , feature , set ( ) ) if len ( state ) > 1 : allowed_indices = { state2index [ _ ] for _ in state } allowed_index = next ( iter ( allowed_indices ) ) joint_states = getattr ( tip , lh_joint_state_feature ) for i in range ( len ( state2index ) ) : if joint_states [ i ] not in allowed_indices : joint_states [ i ] = allowed_index elif len ( state ) == 1 : tip . add_feature ( lh_joint_state_feature , np . ones ( len ( state2index ) , np . int ) * state2index [ next ( iter ( state ) ) ] )
language : php . protected function gatherMetaData ( $ test ) { $ metadata = array ( 'tags' => isset ( $ this -> config [ 'tags' ] ) ? explode ( "," , $ this -> config [ 'tags' ] ) : array ( ) , 'custom-data' => array ( ) , ) ; $ metadata [ 'tags' ] [ ] = "test:" . $ test -> toString ( ) ; $ metadata [ 'custom-data' ] [ 'options' ] = $ this -> options ; return $ metadata ; }
language : javascript . function ( e , ui ) { var dst = $ ( this ) , targets = $ . grep ( ui . helper . data ( 'files' ) || [ ] , function ( h ) { return h ? true : false ; } ) , result = [ ] , dups = [ ] , faults = [ ] , isCopy = ui . helper . hasClass ( 'elfinder-drag-helper-plus' ) , c = 'class' , cnt , hash , i , h ; if ( typeof e . button === 'undefined' || ui . helper . data ( 'namespace' ) !== namespace || ! self . insideWorkzone ( e . pageX , e . pageY ) ) { return false ; } if ( dst . hasClass ( self . res ( c , 'cwdfile' ) ) ) { hash = self . cwdId2Hash ( dst . attr ( 'id' ) ) ; } else if ( dst . hasClass ( self . res ( c , 'navdir' ) ) ) { hash = self . navId2Hash ( dst . attr ( 'id' ) ) ; } else { hash = cwd ; } cnt = targets . length ; while ( cnt -- ) { h = targets [ cnt ] ; if ( h != hash && files [ h ] . phash != hash ) { result . push ( h ) ; } else { ( ( isCopy && h !== hash && files [ hash ] . write ) ? dups : faults ) . push ( h ) ; } } if ( faults . length ) { return false ; } ui . helper . data ( 'droped' , true ) ; if ( dups . length ) { ui . helper . hide ( ) ; self . exec ( 'duplicate' , dups , { _userAction : true } ) ; } if ( result . length ) { ui . helper . hide ( ) ; self . clipboard ( result , ! isCopy ) ; self . exec ( 'paste' , hash , { _userAction : true } , hash ) . always ( function ( ) { self . clipboard ( [ ] ) ; self . trigger ( 'unlockfiles' , { files : targets } ) ; } ) ; self . trigger ( 'drop' , { files : targets } ) ; } }
language : solidity . contract c22952{ function min(uint256 a, uint256 b) internal pure returns (uint256) { if (a < b) { return a; } else { return b; } } }
language : go . func ( d * Disco ) ForceHostServices ( hostname svchost . Hostname , services map [ string ] interface { } ) { if services == nil { services = map [ string ] interface { } { } \n } \n d . hostCache [ hostname ] = & Host { discoURL : & url . URL { Scheme : "https" , Host : string ( hostname ) , Path : discoPath , } , hostname : hostname . ForDisplay ( ) , services : services , transport : d . Transport , } \n }
language : java . public List < Cookie > getAll ( ) { List < Cookie > cookies = new ArrayList < Cookie > ( ) ; for ( org . apache . http . cookie . Cookie cookie : getStore ( ) . getCookies ( ) ) cookies . add ( getCookie ( cookie ) ) ; return cookies ; }
language : php . public function js ( ) { $ renderer = $ this -> debugbar -> getJavascriptRenderer ( ) ; $ content = $ renderer -> dumpAssetsToString ( 'js' ) ; $ response = new Response ( $ content , 200 , [ 'Content-Type' => 'text/javascript' , ] ) ; return $ this -> cacheResponse ( $ response ) ; }
language : java . private SIdChain getSIdChain ( final int pSId , final long pStreamSize ) throws IOException { SIdChain chain = new SIdChain ( ) ; int [ ] sat = isShortStream ( pStreamSize ) ? shortSAT : SAT ; int sid = pSId ; while ( sid != END_OF_CHAIN_SID && sid != FREE_SID ) { chain . addSID ( sid ) ; sid = sat [ sid ] ; } return chain ; }
language : java . private void writeMetrics ( final CouchbaseResponse response ) { if ( currentRequest != null && currentOpTime >= 0 && env ( ) != null && env ( ) . networkLatencyMetricsCollector ( ) . isEnabled ( ) ) { try { Class < ? extends CouchbaseRequest > requestClass = currentRequest . getClass ( ) ; String simpleName = classNameCache . get ( requestClass ) ; if ( simpleName == null ) { simpleName = requestClass . getSimpleName ( ) ; classNameCache . put ( requestClass , simpleName ) ; } NetworkLatencyMetricsIdentifier identifier = new NetworkLatencyMetricsIdentifier ( remoteHostname , serviceType ( ) . toString ( ) , simpleName , response . status ( ) . toString ( ) ) ; env ( ) . networkLatencyMetricsCollector ( ) . record ( identifier , currentOpTime ) ; } catch ( Throwable e ) { LOGGER . warn ( "Could not collect latency metric for request {} ({})" , user ( currentRequest . toString ( ) ) , currentOpTime , e ) ; } } }
language : python . def _get_session ( self ) : if self . _session is None : session = self . _session = self . _database . session ( ) session . create ( ) return self . _session
language : go . func ( c * Cache ) GetReset ( u interface { } , duration time . Duration ) ( interface { } , error ) { c . Lock ( ) \n defer c . Unlock ( ) \n if line , ok := c . data [ u ] ; ok { if c . lifetime != - 1 && line . timer != nil { if duration > 0 { line . timer . Reset ( duration ) \n } else { line . timer . Reset ( c . lifetime ) \n } \n } \n return line . value , nil \n } \n return nil , errors . New ( "cannot read item: not found" ) \n }
language : php . public function removeFromWhitelist ( File $ file ) { if ( ! $ this -> whitelistContainsFile ( $ file ) ) { return false ; } if ( ( $ key = array_search ( $ this -> filePath ( $ file ) , $ this -> whiteList ) ) !== false ) { unset ( $ this -> whiteList [ $ key ] ) ; } $ this -> writeWhitelist ( ) ; return ! $ this -> whitelistContainsFile ( $ file ) ; }
language : php . protected function _getFrameFlag ( $ frame , $ options , $ name ) { $ flag = "@$name" ; $ rval = ( property_exists ( $ frame , $ flag ) ? $ frame -> { $ flag } [ 0 ] : $ options [ $ name ] ) ; if ( $ name === 'embed' ) { if ( $ rval === true ) { $ rval = '@last' ; } else if ( $ rval === false ) { $ rval = '@never' ; } else if ( $ rval !== '@always' && $ rval !== '@never' && $ rval !== '@link' ) { $ rval = '@last' ; } } return $ rval ; }
language : python . def move_dir ( src_fs , src_path , dst_fs , dst_path , workers = 0 , ) : def src ( ) : return manage_fs ( src_fs , writeable = False ) def dst ( ) : return manage_fs ( dst_fs , create = True ) with src ( ) as _src_fs , dst ( ) as _dst_fs : with _src_fs . lock ( ) , _dst_fs . lock ( ) : _dst_fs . makedir ( dst_path , recreate = True ) copy_dir ( src_fs , src_path , dst_fs , dst_path , workers = workers ) _src_fs . removetree ( src_path )
language : python . def decode ( self , bytes , raw = False , index = None ) : if index is not None and isinstance ( self . type , dtype . ArrayType ) : value = self . type . decode ( bytes [ self . slice ( ) ] , index , raw ) else : value = self . type . decode ( bytes [ self . slice ( ) ] , raw ) if self . mask is not None : value &= self . mask if self . shift > 0 : value >>= self . shift if not raw and self . enum is not None : value = self . enum . get ( value , value ) return value
language : php . public function getWebspaceCollection ( ) { if ( null === $ this -> webspaceCollection ) { $ class = $ this -> options [ 'cache_class' ] ; $ cache = new ConfigCache ( $ this -> options [ 'cache_dir' ] . '/' . $ class . '.php' , $ this -> options [ 'debug' ] ) ; if ( ! $ cache -> isFresh ( ) ) { $ webspaceCollectionBuilder = new WebspaceCollectionBuilder ( $ this -> loader , $ this -> urlReplacer , $ this -> options [ 'config_dir' ] ) ; $ webspaceCollection = $ webspaceCollectionBuilder -> build ( ) ; $ dumper = new PhpWebspaceCollectionDumper ( $ webspaceCollection ) ; $ cache -> write ( $ dumper -> dump ( [ 'cache_class' => $ class , 'base_class' => $ this -> options [ 'base_class' ] , ] ) , $ webspaceCollection -> getResources ( ) ) ; } require_once $ cache -> getPath ( ) ; $ this -> webspaceCollection = new $ class ( ) ; } return $ this -> webspaceCollection ; }
language : php . protected function isAcceptableResponse ( $ response ) { if ( $ this -> strict ) { return in_array ( $ response , $ this -> acceptable ) ; } $ acceptable = $ this -> levelPlayingField ( $ this -> acceptable ) ; $ response = $ this -> levelPlayingField ( $ response ) ; return in_array ( $ response , $ acceptable ) ; }
language : python . def _rotate ( degrees : uniform ) : "Rotate image by `degrees`." angle = degrees * math . pi / 180 return [ [ cos ( angle ) , - sin ( angle ) , 0. ] , [ sin ( angle ) , cos ( angle ) , 0. ] , [ 0. , 0. , 1. ] ]
language : python . def _max ( ctx , * number ) : if len ( number ) == 0 : raise ValueError ( "Wrong number of arguments" ) result = conversions . to_decimal ( number [ 0 ] , ctx ) for arg in number [ 1 : ] : arg = conversions . to_decimal ( arg , ctx ) if arg > result : result = arg return result
language : java . void readSlot ( int position , int [ ] buffer ) { { position *= slotsize ; int chunkpos = position >> lowbits ; int slotpos = ( position & lowmask ) ; if ( chunkpos > chunks . size ( ) - 1 ) chunks . addElement ( new int [ chunkalloc ] ) ; int [ ] chunk = chunks . elementAt ( chunkpos ) ; System . arraycopy ( chunk , slotpos , buffer , 0 , slotsize ) ; } }
language : python . def load ( cls , serialized_index ) : from lunr import __TARGET_JS_VERSION__ if isinstance ( serialized_index , basestring ) : serialized_index = json . loads ( serialized_index ) if serialized_index [ "version" ] != __TARGET_JS_VERSION__ : logger . warning ( "Version mismatch when loading serialized index. " "Current version of lunr {} does not match that of serialized " "index {}" . format ( __TARGET_JS_VERSION__ , serialized_index [ "version" ] ) ) field_vectors = { ref : Vector ( elements ) for ref , elements in serialized_index [ "fieldVectors" ] } tokenset_builder = TokenSetBuilder ( ) inverted_index = { } for term , posting in serialized_index [ "invertedIndex" ] : tokenset_builder . insert ( term ) inverted_index [ term ] = posting tokenset_builder . finish ( ) return Index ( fields = serialized_index [ "fields" ] , field_vectors = field_vectors , inverted_index = inverted_index , token_set = tokenset_builder . root , pipeline = Pipeline . load ( serialized_index [ "pipeline" ] ) , )
language : javascript . function firePrebidCacheCall ( auctionInstance , bidList , afterBidAdded ) { removeBidsFromStorage ( bidList ) ; store ( bidList , function ( error , cacheIds ) { if ( error ) { utils . logWarn ( ` ${ error } ` ) ; for ( let i = 0 ; i < bidList . length ; i ++ ) { doCallbacksIfTimedout ( auctionInstance , bidList [ i ] ) ; } } else { for ( let i = 0 ; i < cacheIds . length ; i ++ ) { if ( cacheIds [ i ] . uuid !== '' ) { addBidToAuction ( auctionInstance , bidList [ i ] ) ; } else { utils . logInfo ( ` ${ bidList [ i ] . customCacheKey } ` , bidList [ i ] ) ; } afterBidAdded ( ) ; } } } ) ; }
language : javascript . async function getPreferredMcpRegionalSettings ( accessToken ) { const mcpSettings = await mcpCustomizr . getSettings ( accessToken ) ; return mcpSettings . regionalSettings ; }
language : php . public function postAction ( Request $ request ) { $ contentUid = $ request -> request -> get ( 'content_uid' ) ; $ contentType = $ request -> request -> get ( 'content_type' , null ) ; $ mediaFolderUid = $ request -> request -> get ( 'folder_uid' , null ) ; $ mediaTitle = $ request -> request -> get ( 'title' , 'Untitled media' ) ; if ( null === $ mediaFolderUid ) { $ mediaFolder = $ this -> getMediaFolderRepository ( ) -> getRoot ( ) ; } else { $ mediaFolder = $ this -> getMediaFolderRepository ( ) -> find ( $ mediaFolderUid ) ; } if ( null === $ mediaFolder ) { throw new NotFoundHttpException ( 'Cannot find a media folder' ) ; } if ( null !== $ content = $ this -> getClassContentManager ( ) -> findOneByTypeAndUid ( $ contentType , $ contentUid ) ) { $ this -> autoCommitContent ( $ content ) ; } $ media = new Media ( ) ; $ media -> setContent ( $ content ) ; $ media -> setTitle ( $ mediaTitle ) ; $ media -> setMediaFolder ( $ mediaFolder ) ; $ this -> getEntityManager ( ) -> persist ( $ media ) ; $ this -> getEntityManager ( ) -> flush ( ) ; return $ this -> createJsonResponse ( null , 201 , [ 'BB-RESOURCE-UID' => $ media -> getId ( ) , 'Location' => $ this -> getApplication ( ) -> getRouting ( ) -> getUrlByRouteName ( 'bb.rest.media.get' , [ 'version' => $ request -> attributes -> get ( 'version' ) , 'uid' => $ media -> getId ( ) , ] , '' , false ) , ] ) ; }
language : go . func ( c * client ) Database ( ctx context . Context , name string ) ( Database , error ) { escapedName := pathEscape ( name ) \n req , err := c . conn . NewRequest ( "GET" , path . Join ( "_db" , escapedName , "_api/database/current" ) ) \n if err != nil { return nil , WithStack ( err ) \n } \n resp , err := c . conn . Do ( ctx , req ) \n if err != nil { return nil , WithStack ( err ) \n } \n if err := resp . CheckStatus ( 200 ) ; err != nil { return nil , WithStack ( err ) \n } \n db , err := newDatabase ( name , c . conn ) \n if err != nil { return nil , WithStack ( err ) \n } \n return db , nil \n }
language : php . public function checkMarkVoucherAsCompletelyUsed ( ) { $ bMarkVoucherAsCompletelyUsed = false ; $ oVoucherSeries = & $ this -> GetFieldShopVoucherSeries ( ) ; if ( 'absolut' == $ oVoucherSeries -> fieldValueType && ! is_null ( $ oVoucherSeries -> GetFieldShopVoucherSeriesSponsor ( ) ) ) { $ dValueUsed = $ this -> GetValuePreviouslyUsed ( ) ; if ( $ dValueUsed >= $ this -> GetVoucherSeriesOriginalValue ( ) ) { $ bMarkVoucherAsCompletelyUsed = true ; } } elseif ( 'absolut' == $ oVoucherSeries -> fieldValueType && is_null ( $ oVoucherSeries -> GetFieldShopVoucherSeriesSponsor ( ) ) ) { $ bMarkVoucherAsCompletelyUsed = true ; } else { $ bMarkVoucherAsCompletelyUsed = true ; } return $ bMarkVoucherAsCompletelyUsed ; }
language : java . public static double log ( double x ) { x = Math . max ( 0 , x ) ; double val = x == 0 ? MIN_LOG : Math . max ( MIN_LOG , Math . log ( x ) ) ; return val ; }
language : php . public function listenToQueue ( array $ handlers , $ routingKey = null , $ options = [ ] ) { $ handlersMap = array ( ) ; foreach ( $ handlers as $ handlerClassPath ) { if ( ! class_exists ( $ handlerClassPath ) ) { $ handlerClassPath = "Kontoulis\\RabbitMQLaravel\\Handlers\\DefaultHandler" ; if ( ! class_exists ( $ handlerClassPath ) ) { throw new BrokerException ( "Class $handlerClassPath was not found!" ) ; } } $ handlerOb = new $ handlerClassPath ( ) ; $ classPathParts = explode ( "\\" , $ handlerClassPath ) ; $ handlersMap [ $ classPathParts [ count ( $ classPathParts ) - 1 ] ] = $ handlerOb ; } $ this -> queueDeclareBind ( $ routingKey ) ; $ this -> basic_qos ( ( isset ( $ options [ "prefetch_size" ] ) ? $ options [ "prefetch_size" ] : null ) , ( isset ( $ options [ "prefetch_count" ] ) ? $ options [ "prefetch_count" ] : 1 ) , ( isset ( $ options [ "a_global" ] ) ? $ options [ "a_global" ] : null ) ) ; $ this -> basic_consume ( $ routingKey , ( isset ( $ options [ "consumer_tag" ] ) ? $ options [ "consumer_tag" ] : '' ) , ( isset ( $ options [ "no_local" ] ) ? ( bool ) $ options [ "no_local" ] : false ) , ( isset ( $ options [ "no_ack" ] ) ? ( bool ) $ options [ "no_ack" ] : false ) , ( isset ( $ options [ "exclusive" ] ) ? ( bool ) $ options [ "exclusive" ] : false ) , ( isset ( $ options [ "no_wait" ] ) ? ( bool ) $ options [ "no_wait" ] : false ) , function ( AMQPMessage $ amqpMsg ) use ( $ handlersMap ) { $ msg = Message :: fromAMQPMessage ( $ amqpMsg ) ; $ this -> handleMessage ( $ msg , $ handlersMap ) ; } ) ; return $ this -> waitConsume ( $ options ) ; }
language : ruby . def event ( title , text , opts = EMPTY_OPTIONS ) send_stat format_event ( title , text , opts ) end
language : javascript . function ( ) { var udpServer = dgram . createSocket ( 'udp4' ) ; udpServer . bind ( ) ; udpServer . on ( 'error' , function ( ) { } ) ; getUdpServer = function ( ) { return udpServer ; } ; return getUdpServer ( ) ; }
language : go . func ( f * FieldSpec ) Link ( scope Scope ) ( err error ) { if f . Type , err = f . Type . Link ( scope ) ; err != nil { return err \n } \n if f . Default != nil { f . Default , err = f . Default . Link ( scope , f . Type ) \n } \n return err \n }
language : ruby . def color_floodfill ( x , y , fill ) target = pixel_color ( x , y ) color_flood_fill ( target , fill , x , y , Magick :: FloodfillMethod ) end
language : python . def to_routing_header ( params ) : if sys . version_info [ 0 ] < 3 : return urlencode ( params ) . replace ( "%2F" , "/" ) return urlencode ( params , safe = "/" , )
language : go . func ( mj * mirrorJob ) doMirror ( ctx context . Context , cancelMirror context . CancelFunc , sURLs URLs ) URLs { if sURLs . Error != nil { return sURLs . WithError ( sURLs . Error . Trace ( ) ) \n } \n if mj . isFake { mj . status . Add ( sURLs . SourceContent . Size ) \n return sURLs . WithError ( nil ) \n } \n sourceAlias := sURLs . SourceAlias \n sourceURL := sURLs . SourceContent . URL \n targetAlias := sURLs . TargetAlias \n targetURL := sURLs . TargetContent . URL \n length := sURLs . SourceContent . Size \n mj . status . SetCaption ( sourceURL . String ( ) + ": " ) \n if mj . storageClass != "" { if sURLs . TargetContent . Metadata == nil { sURLs . TargetContent . Metadata = make ( map [ string ] string ) \n } \n sURLs . TargetContent . Metadata [ "X-Amz-Storage-Class" ] = mj . storageClass \n } \n sourcePath := filepath . ToSlash ( filepath . Join ( sourceAlias , sourceURL . Path ) ) \n targetPath := filepath . ToSlash ( filepath . Join ( targetAlias , targetURL . Path ) ) \n mj . status . PrintMsg ( mirrorMessage { Source : sourcePath , Target : targetPath , Size : length , TotalCount : sURLs . TotalCount , TotalSize : sURLs . TotalSize , } ) \n return uploadSourceToTargetURL ( ctx , sURLs , mj . status , mj . encKeyDB ) \n }
language : ruby . def irc_downcase ( irc_string , casemapping = :rfc1459 ) result = irc_string . dup irc_downcase! ( result , casemapping ) return result end
language : java . private void addSuperOuterPath ( TypeDeclaration node ) { TypeElement superclass = ElementUtil . getSuperclass ( node . getTypeElement ( ) ) ; if ( superclass != null && captureInfo . needsOuterParam ( superclass ) ) { node . setSuperOuter ( getOuterPathInherited ( ElementUtil . getDeclaringClass ( superclass ) ) ) ; } }
language : python . def _watch_travis_build ( build_id ) : import requests try : build_size = None running = True while running : with requests . get ( 'https://api.travis-ci.org/builds/%d' % build_id , headers = _travis_headers ( ) ) as r : json = r . json ( ) if build_size is not None : if build_size > 1 : sys . stdout . write ( '\r\x1b[%dA' % build_size ) else : sys . stdout . write ( '\r' ) build_size = len ( json [ 'jobs' ] ) running = False current_number = 1 for job in json [ 'jobs' ] : color , state , is_running = _travis_job_state ( job [ 'state' ] ) if is_running : running = True platform = job [ 'config' ] [ 'os' ] if platform == 'osx' : platform = ' osx ' env = job [ 'config' ] . get ( 'env' , '' ) sudo = 's' if job [ 'config' ] . get ( 'sudo' , True ) else 'c' lang = job [ 'config' ] . get ( 'language' , 'generic' ) padding = ' ' * ( len ( str ( build_size ) ) - len ( str ( current_number ) ) ) number = str ( current_number ) + padding current_number += 1 job_display = '#' + ' ' . join ( [ number , state , platform , sudo , lang , env ] ) print ( color + job_display + colorama . Style . RESET_ALL ) time . sleep ( 3.0 ) except KeyboardInterrupt : pass
language : python . def add_child ( parent , tag , text = None ) : elem = ET . SubElement ( parent , tag ) if text is not None : elem . text = text return elem
language : php . protected function doUpdateSkills ( Group $ model , $ data ) { SkillGroupQuery :: create ( ) -> filterByGroup ( $ model ) -> delete ( ) ; $ errors = [ ] ; foreach ( $ data as $ entry ) { if ( ! isset ( $ entry [ 'id' ] ) ) { $ errors [ ] = 'Missing id for Skill' ; } else { $ related = SkillQuery :: create ( ) -> findOneById ( $ entry [ 'id' ] ) ; $ model -> addSkill ( $ related ) ; } } if ( count ( $ errors ) > 0 ) { throw new ErrorsException ( $ errors ) ; } }
language : go . func ( s * ResourceShare ) SetOwningAccountId ( v string ) * ResourceShare { s . OwningAccountId = & v \n return s \n }
language : java . public static String encodeZeroPadding ( float number , int maxNumDigits ) { String floatString = Float . toString ( number ) ; int numBeforeDecimal = floatString . indexOf ( '.' ) ; numBeforeDecimal = ( numBeforeDecimal >= 0 ? numBeforeDecimal : floatString . length ( ) ) ; int numZeroes = maxNumDigits - numBeforeDecimal ; StringBuffer strBuffer = new StringBuffer ( numZeroes + floatString . length ( ) ) ; for ( int i = 0 ; i < numZeroes ; i ++ ) { strBuffer . insert ( i , '0' ) ; } strBuffer . append ( floatString ) ; return strBuffer . toString ( ) ; }
language : php . private function filterAutoloads ( array $ packageMap , PackageInterface $ mainPackage , array $ blacklist = null ) { $ type = self :: INCLUDE_FILES_PROPERTY ; $ blacklist = array_flip ( $ blacklist ) ; foreach ( $ packageMap as $ item ) { list ( $ package , $ installPath ) = $ item ; if ( $ package === $ mainPackage ) { continue ; } $ autoload = $ package -> getAutoload ( ) ; if ( ! isset ( $ autoload [ $ type ] ) || ! is_array ( $ autoload [ $ type ] ) ) { continue ; } if ( null !== $ package -> getTargetDir ( ) ) { $ installPath = substr ( $ installPath , 0 , - strlen ( '/' . $ package -> getTargetDir ( ) ) ) ; } foreach ( $ autoload [ $ type ] as $ key => $ path ) { if ( $ package -> getTargetDir ( ) && ! is_readable ( $ installPath . '/' . $ path ) ) { $ path = $ package -> getTargetDir ( ) . '/' . $ path ; } $ resolvedPath = $ installPath . '/' . $ path ; $ resolvedPath = strtr ( $ resolvedPath , '\\' , '/' ) ; if ( isset ( $ blacklist [ $ resolvedPath ] ) ) { unset ( $ autoload [ $ type ] [ $ key ] ) ; } } $ package -> setAutoload ( $ autoload ) ; } }
language : php . private function addNestedEmbeddedClasses ( ClassMetadata $ subClass , ClassMetadata $ parentClass , $ prefix ) { foreach ( $ subClass -> embeddedClasses as $ property => $ embeddableClass ) { if ( isset ( $ embeddableClass [ 'inherited' ] ) ) { continue ; } $ embeddableMetadata = $ this -> getMetadataFor ( $ embeddableClass [ 'class' ] ) ; $ parentClass -> mapEmbedded ( array ( 'fieldName' => $ prefix . '.' . $ property , 'class' => $ embeddableMetadata -> name , 'columnPrefix' => $ embeddableClass [ 'columnPrefix' ] , 'declaredField' => $ embeddableClass [ 'declaredField' ] ? $ prefix . '.' . $ embeddableClass [ 'declaredField' ] : $ prefix , 'originalField' => $ embeddableClass [ 'originalField' ] ? : $ property , ) ) ; } }
language : python . def readfile ( filename , binary = False ) : if not os . path . isfile ( filename ) : return None try : flags = 'r' if not binary else 'rb' with open ( filename , flags ) as _file : return _file . read ( ) except ( OSError , IOError ) : return None
language : javascript . function ( name , title , url , setupTemplate , setup , showDevTools ) { const window = new Window ( name , title , url , setupTemplate , setup , showDevTools ) ; return ( window == null || Object . keys ( window ) . length === 0 ) ? false : window ; }
language : python . def campaign_name ( self , campaign_name ) : if campaign_name is None : raise ValueError ( "Invalid value for `campaign_name`, must not be `None`" ) if campaign_name is not None and len ( campaign_name ) > 250 : raise ValueError ( "Invalid value for `campaign_name`, length must be less than or equal to `250`" ) if campaign_name is not None and len ( campaign_name ) < 1 : raise ValueError ( "Invalid value for `campaign_name`, length must be greater than or equal to `1`" ) self . _campaign_name = campaign_name
language : php . private function loadService ( ) { $ this -> getEventManager ( ) -> dispatch ( self :: EVENT_BEFORE_LOAD_SERVICE , $ this ) ; foreach ( $ this -> registerBundles ( ) as $ bundle ) { $ bundle -> loadService ( ) ; } $ this -> getEventManager ( ) -> dispatch ( self :: EVENT_AFTER_LOAD_SERVICE , $ this ) ; }
language : python . def copy ( srcpath , dstpath , overwrite = True ) : if not op . exists ( srcpath ) : return False if not overwrite : if op . isfile ( dstpath ) : return False if op . isdir ( dstpath ) : chkpath = op . join ( dstpath , op . basename ( srcpath ) ) if op . isdir ( chkpath ) or op . isfile ( chkpath ) : return False srcpath = op . abspath ( srcpath ) dstpath = op . abspath ( dstpath ) if op . isdir ( srcpath ) : dstdir = dstpath if op . isfile ( dstpath ) : dstdir = op . dirname ( dstpath ) elif op . isdir ( dstpath ) : dstdir = op . join ( dstpath , op . basename ( srcpath ) ) makedirs ( dstdir ) for r , ds , fs in os . walk ( srcpath ) : basedir = r . replace ( srcpath , "" ) . rstrip ( os . sep ) . strip ( os . sep ) curdir = op . join ( dstdir , basedir ) makedirs ( curdir ) for f in fs : if not copy ( op . join ( r , f ) , op . join ( curdir , f ) , overwrite = overwrite ) : return False elif op . isfile ( srcpath ) : makedirs ( dstpath ) shutil . copy2 ( srcpath , dstpath ) return op . exists ( dstpath )
language : python . def display_modules_list ( self ) : print ( "Plugins list: {}" . format ( ', ' . join ( sorted ( self . stats . getPluginsList ( enable = False ) ) ) ) ) print ( "Exporters list: {}" . format ( ', ' . join ( sorted ( self . stats . getExportsList ( enable = False ) ) ) ) )
language : go . func ( l * List ) OnKeyEvent ( ev KeyEvent ) { if ! l . IsFocused ( ) { return \n } \n switch ev . Key { case KeyUp : l . moveUp ( ) \n case KeyDown : l . moveDown ( ) \n case KeyEnter : if l . onItemActivated != nil { l . onItemActivated ( l ) \n } \n } \n switch ev . Rune { case 'k' : l . moveUp ( ) \n case 'j' : l . moveDown ( ) \n } \n }
language : javascript . function isNodeInVarOnTop ( node , varNode ) { return varNode && varNode . parent . loc . start . line === node . loc . start . line && varNode . parent . declarations . length > 1 ; }
language : java . public void free ( ) { if ( this . getTargetScreen ( JBaseFrame . class ) != null ) ( ( JBaseFrame ) this . getTargetScreen ( JBaseFrame . class ) ) . setTitle ( null ) ; this . freeSubComponents ( this ) ; }
language : java . protected void checkVariableName ( GraphRewrite event , EvaluationContext context ) { if ( variableName == null ) { setVariableName ( Iteration . getPayloadVariableName ( event , context ) ) ; } }
language : php . public function load ( array $ routesConfig ) { foreach ( $ routesConfig as $ route ) { $ pattern = $ route [ 0 ] ; $ handler = $ route [ 1 ] ?? null ; $ methods = $ route [ 2 ] ?? '*' ; $ this -> map ( $ pattern , $ handler , $ methods ) ; } return $ this -> routes ; }
language : php . protected function find_image_size_from_width ( $ sizes , $ width ) { foreach ( $ sizes as $ name => $ size ) { if ( $ width === $ size [ 'width' ] ) { return $ name ; } } return null ; }
language : php . public function isStackable ( $ filename ) { try { $ file = $ this -> matcher -> getFile ( $ filename ) ; } catch ( FileNotFoundException $ e ) { return false ; } if ( ! in_array ( $ file -> getExtension ( ) , $ this -> acceptedFileTypes ) ) { return false ; } return ! $ this -> contains ( $ file ) ; }
language : go . func ( r * UpsideDownCouchDocIDReader ) nextOnly ( ) bool { start := r . onlyPos \n r . onlyPos ++ \n for r . onlyPos < len ( r . only ) && r . only [ r . onlyPos ] == r . only [ start ] { start = r . onlyPos \n r . onlyPos ++ \n } \n return r . onlyPos < len ( r . only ) \n }
