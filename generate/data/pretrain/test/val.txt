language : python . def nominal_step ( x = None ) : if x is None : return 1.0 return np . log1p ( np . abs ( x ) ) . clip ( min = 1.0 )
language : php . public function toUpperCase ( ) { $ token = $ this -> getConstantName ( ) -> lastToken ( ) ; $ token -> setText ( strtoupper ( $ token -> getText ( ) ) ) ; return $ this ; }
language : php . public function save_config ( array $ cfg , $ description , $ class = 'grid' ) { if ( isset ( $ cfg [ 'elements' ] ) ) { $ copy = $ cfg ; unset ( $ copy [ 'elements' ] ) ; $ obj_param = [ 'id_project' => 1 , 'class' => $ class , 'description' => $ description , 'configuration' => json_encode ( $ copy ) ] ; if ( isset ( $ cfg [ 'table' ] ) ) { $ obj_param [ 'table' ] = $ cfg [ 'table' ] ; } $ this -> db -> insert ( $ this -> admin_db . '.' . $ this -> prefix . 'objects' , $ obj_param ) ; $ id = $ this -> db -> last_id ( ) ; $ i = 1 ; foreach ( $ cfg [ 'elements' ] as $ name => $ ele ) { $ table = $ column = false ; if ( ! empty ( $ ele [ 'appui' ] [ 'table' ] ) ) { $ table = $ ele [ 'appui' ] [ 'table' ] ; } else if ( ! empty ( $ ele [ 'table' ] ) ) { $ table = $ ele [ 'table' ] ; } else if ( ! empty ( $ cfg [ 'table' ] ) ) { $ table = $ cfg [ 'table' ] ; } if ( $ table && isset ( $ ele [ 'attr' ] [ 'name' ] ) ) { $ column = $ this -> db -> tfn ( $ table ) . '.' . $ this -> db -> csn ( $ ele [ 'attr' ] [ 'name' ] ) ; } $ this -> db -> insert ( $ this -> admin_db . '.' . $ this -> prefix . 'fields' , [ 'id_obj' => $ id , 'column' => ( $ column ? : null ) , 'title' => isset ( $ ele [ 'label' ] ) ? $ ele [ 'label' ] : null , 'position' => $ i , 'configuration' => json_encode ( $ ele ) ] ) ; $ i ++ ; } return $ id ; } }
language : go . func ( gt * GLTriangles ) Color ( i int ) pixel . RGBA { r := gt . data [ i * gt . vs . Stride ( ) + 2 ] \n g := gt . data [ i * gt . vs . Stride ( ) + 3 ] \n b := gt . data [ i * gt . vs . Stride ( ) + 4 ] \n a := gt . data [ i * gt . vs . Stride ( ) + 5 ] \n return pixel . RGBA { R : float64 ( r ) , G : float64 ( g ) , B : float64 ( b ) , A : float64 ( a ) , } \n }
language : java . void exitRestore ( ) { try { m_zk . delete ( m_generatedRestoreBarrier2 , - 1 ) ; } catch ( Exception e ) { VoltDB . crashLocalVoltDB ( "Unable to delete zk node " + m_generatedRestoreBarrier2 , false , e ) ; } if ( m_callback != null ) { m_callback . onSnapshotRestoreCompletion ( ) ; } LOG . debug ( "Waiting for all hosts to complete restore" ) ; List < String > children = null ; while ( true ) { try { children = m_zk . getChildren ( VoltZK . restore_barrier2 , false ) ; } catch ( KeeperException e2 ) { VoltDB . crashGlobalVoltDB ( e2 . getMessage ( ) , false , e2 ) ; } catch ( InterruptedException e2 ) { continue ; } if ( children . size ( ) > 0 ) { try { Thread . sleep ( 500 ) ; } catch ( InterruptedException e ) { } } else { break ; } } try { m_zk . delete ( VoltZK . restore_snapshot_id , - 1 ) ; } catch ( Exception ignore ) { } }
language : python . def resolve_path ( filename : Path ) -> typing . Union [ Path , None ] : current = Path . cwd ( ) sentinel_dir = Path . home ( ) . parent . resolve ( ) while current != sentinel_dir : target = Path ( current ) / Path ( filename ) if target . exists ( ) : return target . resolve ( ) else : current = current . parent . resolve ( ) return None
language : java . public static VATINStructure getFromVATINCountry ( final String sVATIN ) { if ( StringHelper . getLength ( sVATIN ) >= 2 ) { final String sCountry = sVATIN . substring ( 0 , 2 ) ; for ( final VATINStructure aStructure : s_aList ) if ( aStructure . getExamples ( ) . get ( 0 ) . substring ( 0 , 2 ) . equalsIgnoreCase ( sCountry ) ) return aStructure ; } return null ; }
language : java . public String [ ] getClassnames ( ) { final Attributes attributes = getMainAttributes ( ) ; if ( null == attributes ) { return null ; } final String value = attributes . getValue ( RUNDECK_PLUGIN_CLASSNAMES ) ; if ( null == value ) { return null ; } return value . split ( "," ) ; }
language : python . def _get_autoreload_programs ( self , cfg_file ) : cfg = RawConfigParser ( ) cfg . readfp ( cfg_file ) reload_progs = [ ] for section in cfg . sections ( ) : if section . startswith ( "program:" ) : try : if cfg . getboolean ( section , "autoreload" ) : reload_progs . append ( section . split ( ":" , 1 ) [ 1 ] ) except NoOptionError : pass return reload_progs
language : php . public function getName ( ) { if ( $ this -> indexName === null ) { try { $ this -> createName ( ) ; } catch ( EngineException $ e ) { } } if ( $ database = $ this -> getTable ( ) -> getDatabase ( ) ) { return substr ( $ this -> indexName , 0 , $ database -> getPlatform ( ) -> getMaxColumnNameLength ( ) ) ; } else { return $ this -> indexName ; } }
language : python . def find_class_module ( module_name : str , class_name : str ) -> Tuple [ List [ str ] , List [ Tuple [ str , Exception ] ] ] : matched_submodules = [ ] erroneous_submodules = [ ] for submodule_name in list_submodules ( module_name ) : try : submodule = importlib . import_module ( submodule_name ) if hasattr ( submodule , class_name ) : matched_submodules . append ( submodule_name ) except Exception as ex : erroneous_submodules . append ( ( submodule_name , ex ) ) return matched_submodules , erroneous_submodules
language : php . public function type_ahead ( ) { if ( $ response = $ this -> overrideAction ( 'type_ahead' ) ) { return ; } $ this -> viewClass = 'Json' ; $ this -> layout = 'ajax' ; if ( empty ( $ this -> request -> query [ 'term' ] ) ) { throw new BadRequestException ( __d ( 'admin' , 'Missing Query' ) ) ; } $ this -> set ( 'results' , $ this -> AdminToolbar -> searchTypeAhead ( $ this -> Model , $ this -> request -> query ) ) ; $ this -> set ( '_serialize' , 'results' ) ; }
language : ruby . def save ( file ) File . open ( file , "w" ) do | f | f . write ( @raw_cert . to_pem ) end true end
language : java . public static MozuUrl deleteUserAuthTicketUrl ( String refreshToken ) { UrlFormatter formatter = new UrlFormatter ( "/api/platform/adminuser/authtickets/?refreshToken={refreshToken}" ) ; formatter . formatUrl ( "refreshToken" , refreshToken ) ; return new MozuUrl ( formatter . getResourceUrl ( ) , MozuUrl . UrlLocation . HOME_POD ) ; }
language : php . public function onlyOne ( $ tempDir = null , callable $ whenOverlapping = null ) { if ( $ tempDir === null || ! is_dir ( $ tempDir ) ) { $ tempDir = $ this -> tempDir ; } $ this -> lockFile = implode ( '/' , [ trim ( $ tempDir ) , trim ( $ this -> id ) . '.lock' , ] ) ; if ( $ whenOverlapping ) { $ this -> whenOverlapping = $ whenOverlapping ; } else { $ this -> whenOverlapping = function ( ) { return false ; } ; } return $ this ; }
language : javascript . function handleFile ( fs , path , res ) { var contentType = mime . lookup ( path ) ; var encoding = mime . charsets . lookup ( contentType ) === "UTF-8" ? "utf8" : null ; fs . readFile ( path , { encoding : encoding } , function ( err , data ) { if ( err ) { log . error ( err , 'Unable to read file path `%s`' , path ) ; handle404 ( path , res ) ; return ; } write ( data , contentType , res ) ; } ) ; }
language : php . protected function renderBehaviourParallax ( ) { if ( ! in_array ( self :: BEHAVIOUR_PARALLAX , $ this -> behaviours ) ) { return '' ; } $ parallaxOptions = $ this -> parallaxOptions ; $ parallaxTag = ArrayHelper :: remove ( $ parallaxOptions , 'tag' , 'div' ) ; ArrayHelper :: remove ( $ parallaxOptions , self :: PARALLAX_BACKGROUND ) ; ArrayHelper :: remove ( $ parallaxOptions , self :: PARALLAX_TRANSITION ) ; ArrayHelper :: remove ( $ parallaxOptions , self :: PARALLAX_TRANSITION_X ) ; ArrayHelper :: remove ( $ parallaxOptions , self :: PARALLAX_TRANSITION_Y ) ; ArrayHelper :: remove ( $ parallaxOptions , self :: PARALLAX_DURATION ) ; return Html :: tag ( $ parallaxTag , '' , $ parallaxOptions ) ; }
language : javascript . function parseSLComment ( css ) { var start = pos ; for ( pos += 2 ; pos < css . length ; pos ++ ) { if ( css . charAt ( pos ) === '\n' || \n ) css . charAt ( pos ) === '\r' } \r { break ; } }
language : go . func backingEntityIdForOpenedPortsKey ( modelUUID , key string ) ( multiwatcher . EntityId , bool ) { parts , err := extractPortsIDParts ( key ) \n if err != nil { logger . Debugf ( "cannot parse ports key %q: %v" , key , err ) \n return multiwatcher . EntityId { } , false \n } \n return backingEntityIdForGlobalKey ( modelUUID , machineGlobalKey ( parts [ 1 ] ) ) \n }
language : php . protected function topologyInfo ( Infoset $ info , Descriptor $ topology ) { $ topologyInfo = $ this -> createInfoset ( ) ; $ topologyInfo -> setTitle ( 'Topology' ) ; $ topologyInfo -> setContentType ( Infoset :: TYPE_TOPOLOGY ) ; $ topologyInfo [ ] = $ topology ; $ info [ ] = $ topologyInfo ; }
language : php . public static function obfuscate ( $ value ) { $ html = self :: getInstance ( ) -> html ; $ args = func_get_args ( ) ; return call_user_func_array ( array ( $ html , __FUNCTION__ ) , $ args ) ; }
language : ruby . def transition_state ( state ) authorize @contribution @initiative = @contribution . initiative @user = @contribution . user state = state . to_sym transition = @contribution . transition_by_state ( state ) initial_state = @contribution . state_name resource_name = @contribution . class . model_name . human if @contribution . send ( "can_#{transition}?" ) begin if @contribution . state_on_gateway != state if @contribution . update_state_on_gateway! ( state ) @contribution . send ( "#{transition}!" ) else flash [ :alert ] = t ( 'flash.actions.update.alert' , resource_name : resource_name ) end else @contribution . send ( "#{transition}!" ) end rescue flash [ :alert ] = t ( 'flash.actions.update.alert' , resource_name : resource_name ) end else flash [ :alert ] = t ( 'flash.actions.update.alert' , resource_name : resource_name ) end if flash [ :alert ] . present? render 'initiatives/contributions/show' else if initial_state == :pending flash [ :notice ] = t ( 'flash.actions.create.notice' , resource_name : resource_name ) else flash [ :notice ] = t ( 'flash.actions.update.notice' , resource_name : resource_name ) end redirect_to initiative_contribution_path ( @contribution . initiative . id , @contribution ) end end
language : java . public void setValue ( int years , int months , int days , int hours , int minutes , double seconds ) { setYears ( years ) ; setMonths ( months ) ; setDays ( days ) ; setHours ( hours ) ; setMinutes ( minutes ) ; setSeconds ( seconds ) ; }
language : java . public ElementWithOptions addOptionGroup ( OptionGroup optionGroup ) { if ( optionGroup == null ) { throw new IllegalArgumentException ( "Group cannot be null" ) ; } String groupId = optionGroup . getId ( ) ; if ( optionGroups . containsKey ( groupId ) ) { throw new IllegalArgumentException ( "The group id '" + groupId + "' already present in this element" ) ; } Set < String > groupValues = optionGroup . getOptionValues ( ) ; for ( String groupValue : groupValues ) { if ( this . hasValue ( groupValue ) ) { throw new IllegalArgumentException ( "The value '" + groupValue + "' is already present in this element" ) ; } } optionGroups . put ( groupId , optionGroup ) ; return this ; }
language : python . def get_db_prep_save ( self , value , connection , prepared = False ) : log . debug ( "get_db_prep_save: {}, {}" , value , type ( value ) ) if not value : return '' return python_localized_datetime_to_human_iso ( value )
language : php . public function close ( ) { if ( $ this -> _handle !== null ) { fclose ( $ this -> _handle ) ; $ this -> _handle = null ; } }
language : python . def data ( self ) : if self . _data is None : return np . empty ( ( 0 , 1 ) ) if self . _data_scaled is None : scale = scaling . get_scaling ( self ) if scale is None : self . _data_scaled = self . _data else : self . _data_scaled = scale . scale ( self . _data ) return self . _data_scaled
language : java . public void endClassCoverage ( String className , boolean isFailOrError ) { File testResultsDir = new File ( Config . ROOT_DIR_V , Names . TEST_RESULTS_DIR_NAME ) ; File outcomeFile = new File ( testResultsDir , className ) ; if ( isFailOrError ) { testResultsDir . mkdirs ( ) ; try { outcomeFile . createNewFile ( ) ; } catch ( IOException e ) { Log . e ( "Unable to create file for a failing test: " + className , e ) ; } } else { outcomeFile . delete ( ) ; } endClassCoverage ( className ) ; }
language : go . func ( o Middleware ) PublisherMsgInterceptor ( serviceName string , next pubsub . PublishHandler ) pubsub . PublishHandler { return func ( ctx context . Context , topic string , m * pubsub . Msg ) error { var user string \n audit , ok := ctx . Value ( "x-audit-user" ) . ( string ) \n if ok && audit != "" { user = audit \n } \n md , ok := metadata . FromIncomingContext ( ctx ) \n if ok { if len ( md [ "x-audit-user" ] ) > 0 { user = md [ "x-audit-user" ] [ 0 ] \n } \n } \n m . Metadata [ "x-audit-user" ] = user \n return next ( ctx , topic , m ) \n } \n }
language : java . public Chunk setTextRenderMode ( int mode , float strokeWidth , Color strokeColor ) { return setAttribute ( TEXTRENDERMODE , new Object [ ] { Integer . valueOf ( mode ) , new Float ( strokeWidth ) , strokeColor } ) ; }
language : php . protected function parseResponse ( $ data ) { if ( ! array_key_exists ( $ this -> arrayKey , $ data ) ) { throw new \ Paysafe \ PaysafeException ( 'Missing array key from results' ) ; } foreach ( $ data [ $ this -> arrayKey ] as $ row ) { array_push ( $ this -> results , new $ this -> className ( $ row ) ) ; } $ this -> nextPage = null ; if ( array_key_exists ( 'links' , $ data ) ) { foreach ( $ data [ 'links' ] as $ link ) { if ( $ link [ 'rel' ] == 'next' ) { $ this -> nextPage = new \ Paysafe \ Link ( $ link ) ; } } } }
language : php . public function align ( Template $ template , array $ templateSlots ) { $ slots = array_flip ( $ template -> getSlots ( ) ) ; if ( empty ( $ templateSlots ) || empty ( $ slots ) ) { return null ; } $ templateName = strtolower ( $ template -> getTemplateName ( ) ) ; $ templateSlots = array_intersect_key ( $ templateSlots , $ slots ) ; if ( null === $ this -> languageId ) { $ languageRepository = $ this -> factoryRepository -> createRepository ( 'Language' ) ; $ language = $ languageRepository -> mainLanguage ( ) ; $ this -> languageId = $ language -> getId ( ) ; } if ( null === $ this -> pageId ) { $ pageRepository = $ this -> factoryRepository -> createRepository ( 'Page' ) ; $ page = $ pageRepository -> fromTemplateName ( $ templateName , true ) ; $ this -> pageId = $ page -> getId ( ) ; } $ pageBlocks = $ this -> blockRepository -> retrieveContents ( array ( 1 , $ this -> languageId ) , array ( 1 , $ this -> pageId ) ) ; $ currentSlots = $ this -> templateSlotsToArray ( $ templateSlots ) ; $ changedSlots = array ( ) ; foreach ( $ pageBlocks as $ pageBlock ) { $ slotName = $ pageBlock -> getSlotName ( ) ; if ( array_key_exists ( $ slotName , $ currentSlots ) ) { $ languageId = $ pageBlock -> getLanguageId ( ) ; $ pageId = $ pageBlock -> getPageId ( ) ; $ currentRepeatedStatus = 'page' ; if ( $ languageId == 1 && $ pageId == 1 ) { $ currentRepeatedStatus = 'site' ; } if ( $ languageId != 1 && $ pageId == 1 ) { $ currentRepeatedStatus = 'language' ; } if ( $ currentRepeatedStatus != $ currentSlots [ $ slotName ] ) { $ changedSlots [ $ slotName ] = $ currentSlots [ $ slotName ] ; } } } return ( ! empty ( $ changedSlots ) ) ? $ this -> updateSlotStatus ( $ templateSlots , $ changedSlots ) : null ; }
language : java . private List < String > complexWordsRecognition ( String token ) throws ContextPreprocessorException { List < String > result = new ArrayList < String > ( ) ; try { List < ISense > senses = new ArrayList < ISense > ( ) ; int i = 0 ; String start = null ; String end = null ; String toCheck = null ; boolean flag = false ; boolean multiword = false ; while ( ( i < token . length ( ) - 1 ) && ( 0 == senses . size ( ) ) ) { i ++ ; start = token . substring ( 0 , i ) ; end = token . substring ( i , token . length ( ) ) ; toCheck = start + ' ' + end ; senses = linguisticOracle . getSenses ( toCheck ) ; if ( 0 == senses . size ( ) ) { toCheck = start + '-' + end ; senses = linguisticOracle . getSenses ( toCheck ) ; } if ( 0 < senses . size ( ) ) { multiword = true ; break ; } else { if ( ( start . length ( ) > 3 ) && ( end . length ( ) > 3 ) ) { senses = linguisticOracle . getSenses ( start ) ; if ( 0 < senses . size ( ) ) { senses = linguisticOracle . getSenses ( end ) ; if ( 0 < senses . size ( ) ) { flag = true ; break ; } } } } } if ( multiword ) { result . add ( toCheck ) ; return result ; } if ( flag ) { result . add ( start ) ; result . add ( end ) ; return result ; } return result ; } catch ( LinguisticOracleException e ) { final String errMessage = e . getClass ( ) . getSimpleName ( ) + ": " + e . getMessage ( ) ; log . error ( errMessage , e ) ; throw new ContextPreprocessorException ( errMessage , e ) ; } }
language : ruby . def save_images ( urls , file_path ) urls . each_with_index do | url , i | open ( "#{@topic.gsub(' ', '-')}_#{i}.jpg" , 'wb' ) do | file | file << open ( url ) . read end end end
language : go . func ContextRequiredScopes ( ctx context . Context ) [ ] string { if s := ctx . Value ( securityScopesKey ) ; s != nil { return s . ( [ ] string ) \n } \n return nil \n }
language : php . public function process ( $ email , $ fromName , $ fromEmail , $ maxAttempts ) { try { if ( $ this -> send ( $ email , $ fromName , $ fromEmail ) ) { $ this -> db -> createCommand ( ) -> update ( $ this -> queueTable , [ 'status' => Email :: STATUS_SENT ] , [ 'id' => $ email [ 'id' ] ] ) -> execute ( ) ; return true ; } $ attempt = $ email [ 'attempt' ] + 1 ; if ( $ attempt <= $ maxAttempts ) { $ this -> db -> createCommand ( ) -> update ( $ this -> queueTable , [ 'attempt' => $ attempt ] , [ 'id' => $ email [ 'id' ] ] ) -> execute ( ) ; } else { $ this -> db -> createCommand ( ) -> update ( $ this -> queueTable , [ 'status' => Email :: STATUS_GAVEUP ] , [ 'id' => $ email [ 'id' ] ] ) -> execute ( ) ; } } catch ( Exception $ e ) { Log :: error ( $ e -> getMessage ( ) , null , __METHOD__ ) ; } return false ; }
language : go . func ( exp * explorerUI ) simulateASR ( StartingDCRBalance float64 , IntegerTicketQty bool , CurrentStakePercent float64 , ActualCoinbase float64 , CurrentBlockNum float64 , ActualTicketPrice float64 ) ( ASR float64 , ReturnTable string ) { if exp . ChainParams . Name != "mainnet" { return 0 , "" \n } \n BlocksPerDay := 86400 / exp . ChainParams . TargetTimePerBlock . Seconds ( ) \n BlocksPerYear := 365 * BlocksPerDay \n TicketsPurchased := float64 ( 0 ) \n StakeRewardAtBlock := func ( blocknum float64 ) float64 { Subsidy := exp . blockData . BlockSubsidy ( int64 ( blocknum ) , 1 ) \n return dcrutil . Amount ( Subsidy . PoS ) . ToCoin ( ) \n } \n MaxCoinSupplyAtBlock := func ( blocknum float64 ) float64 { return ( - 9E-19 * math . Pow ( blocknum , 4 ) + 7E-12 * math . Pow ( blocknum , 3 ) - 2E-05 * math . Pow ( blocknum , 2 ) + 29.757 * blocknum + 76963 + 1680000 ) \n } \n CoinAdjustmentFactor := ActualCoinbase / MaxCoinSupplyAtBlock ( CurrentBlockNum ) \n TheoreticalTicketPrice := func ( blocknum float64 ) float64 { ProjectedCoinsCirculating := MaxCoinSupplyAtBlock ( blocknum ) * CoinAdjustmentFactor * CurrentStakePercent \n TicketPoolSize := ( float64 ( exp . MeanVotingBlocks ) + float64 ( exp . ChainParams . TicketMaturity ) + float64 ( exp . ChainParams . CoinbaseMaturity ) ) * float64 ( exp . ChainParams . TicketsPerBlock ) \n return ProjectedCoinsCirculating / TicketPoolSize \n } \n TicketAdjustmentFactor := ActualTicketPrice / TheoreticalTicketPrice ( CurrentBlockNum ) \n simblock := CurrentBlockNum \n TicketPrice := ActualTicketPrice \n DCRBalance := StartingDCRBalance \n ReturnTable += fmt . Sprintf ( "\n\nBLOCKNUM        DCR  TICKETS TKT_PRICE TKT_REWRD  ACTION\n" ) \n \n \n \n \n \n \n ReturnTable += fmt . Sprintf ( "%8d  %9.2f %8.1f %9.2f %9.2f    INIT\n" , \n , int64 ( simblock ) , DCRBalance , TicketsPurchased , TicketPrice ) \n StakeRewardAtBlock ( simblock ) \n for simblock < ( BlocksPerYear + CurrentBlockNum ) { TicketPrice = TheoreticalTicketPrice ( simblock ) * TicketAdjustmentFactor \n if IntegerTicketQty { TicketsPurchased = math . Floor ( DCRBalance / TicketPrice ) \n } else { TicketsPurchased = ( DCRBalance / TicketPrice ) \n } \n DCRBalance -= ( TicketPrice * TicketsPurchased ) \n ReturnTable += fmt . Sprintf ( "%8d  %9.2f %8.1f %9.2f %9.2f     BUY\n" , \n , int64 ( simblock ) , DCRBalance , TicketsPurchased , TicketPrice ) \n StakeRewardAtBlock ( simblock ) \n simblock += ( float64 ( exp . ChainParams . TicketMaturity ) + float64 ( exp . MeanVotingBlocks ) ) \n ReturnTable += fmt . Sprintf ( "%8d  %9.2f %8.1f %9.2f %9.2f    VOTE\n" , \n , int64 ( simblock ) , DCRBalance , TicketsPurchased , ( TheoreticalTicketPrice ( simblock ) * TicketAdjustmentFactor ) ) \n StakeRewardAtBlock ( simblock ) \n DCRBalance += ( TicketPrice * TicketsPurchased ) \n DCRBalance += ( StakeRewardAtBlock ( simblock ) * TicketsPurchased ) \n TicketsPurchased = 0 \n simblock += float64 ( exp . ChainParams . CoinbaseMaturity ) \n } \n }
language : go . func ( e * TextEdit ) SizeHint ( ) image . Point { var max int \n lines := strings . Split ( e . text . String ( ) , "\n" ) \n \n \n for _ , line := range lines { if w := stringWidth ( line ) ; w > max { max = w \n } \n } \n }
language : python . def page_list ( request , template_name = 'wakawaka/page_list.html' , extra_context = None ) : page_list = WikiPage . objects . all ( ) page_list = page_list . order_by ( 'slug' ) template_context = { 'page_list' : page_list , 'index_slug' : getattr ( settings , 'WAKAWAKA_DEFAULT_INDEX' , 'WikiIndex' ) , } template_context . update ( extra_context or { } ) return render ( request , template_name , template_context )
language : php . public function content ( $ moreLinkText = null , $ stripTeaser = false ) { global $ post ; $ _p = $ post ; $ post = $ this -> post ; setup_postdata ( $ post ) ; $ content = get_the_content ( $ moreLinkText , $ stripTeaser ) ; $ content = WP :: applyFilters ( 'the_content' , $ content ) ; $ content = str_replace ( ']]>' , ']]&gt;' , $ content ) ; $ post = $ _p ; if ( $ _p ) { setup_postdata ( $ post ) ; } return $ content ; }
language : php . public function edit ( TagRequest $ request , Tag $ tag ) { return $ this -> response -> title ( trans ( 'app.edit' ) . ' ' . trans ( 'blog::tag.name' ) ) -> view ( 'blog::tag.edit' , true ) -> data ( compact ( 'tag' ) ) -> output ( ) ; }
language : java . public static long randomLong ( long startInclusive , long endExclusive ) { checkArgument ( startInclusive <= endExclusive , "End must be greater than or equal to start" ) ; if ( startInclusive == endExclusive ) { return startInclusive ; } return RANDOM . longs ( 1 , startInclusive , endExclusive ) . sum ( ) ; }
language : solidity . contract c19699{ function checkMinimum(StageStorage storage self, uint8 _stage, uint256 _tokens) internal view returns (bool isValid) { if(_tokens < self.stages[_stage].minimumBuy){ return false; } else { return true; } } }
language : java . public static void main ( String [ ] args ) throws IOException { CommandLineInterface cli = new CommandLineInterface ( ) ; cli . addOpt ( "-d" , "directory" , "./" ) ; cli . addOpt ( "-a" , "alpha" , "" + DEFAULT_ALPHA ) ; cli . addOpt ( "-s" , "seed" , null ) ; cli . parse ( args ) ; if ( cli . hasParam ( "--genprofile" ) ) { cli . generateProfile ( ) ; } else if ( cli . hasParam ( "--detectlang" ) ) { cli . detectLang ( ) ; } else if ( cli . hasParam ( "--batchtest" ) ) { cli . batchTest ( ) ; } }
language : php . public static function createRouteRedirect ( $ route , array $ parameters = [ ] , $ statusCode = Response :: HTTP_FOUND , array $ headers = [ ] ) { $ view = static :: create ( null , $ statusCode , $ headers ) ; $ view -> setRoute ( $ route ) ; $ view -> setRouteParameters ( $ parameters ) ; return $ view ; }
language : php . protected function _extractPath ( $ aPath ) { $ sExtPath = '' ; $ blBuildPath = false ; for ( $ i = count ( $ aPath ) ; $ i > 0 ; $ i -- ) { $ sDir = $ aPath [ $ i - 1 ] ; if ( $ blBuildPath ) { $ sExtPath = $ sDir . '/' . $ sExtPath ; } if ( stristr ( $ sDir , EditionPathProvider :: SETUP_DIRECTORY ) ) { $ blBuildPath = true ; } } return $ sExtPath ; }
language : php . private function getLockingStorageAliases ( ContainerBuilder $ container ) { $ taggedServices = $ container -> findTaggedServiceIds ( 'task.lock.storage' ) ; $ result = [ ] ; foreach ( $ taggedServices as $ id => $ tags ) { foreach ( $ tags as $ tag ) { $ result [ $ tag [ 'alias' ] ] = $ id ; } } return $ result ; }
language : python . def event_payment ( self , date , time , pid , commerce_id , transaction_id , request_ip , token , webpay_server ) : raise NotImplementedError ( "Logging Handler must implement event_payment" )
language : javascript . function wrapFunctions ( name , obj , protoLevel , hooks , state , rules ) { if ( ! ( obj && ( util . isObject ( obj ) || util . isFunction ( obj ) ) ) ) { return ; } if ( obj . __concurix_blacklisted || ( obj . constructor && obj . constructor . __concurix_blacklisted ) ) { return ; } if ( obj . __concurix_wrapped_obj__ || ! Object . isExtensible ( obj ) ) { return ; } tagObject ( obj , '__concurix_wrapped_obj__' ) ; protoLevel = protoLevel ? protoLevel : 0 ; util . iterateOwnProperties ( obj , function ( key ) { var desc = Object . getOwnPropertyDescriptor ( obj , key ) ; if ( desc == null ) { return ; } if ( ! desc . configurable || ! desc . writable || desc . set ) { return ; } if ( desc . value && desc . value . __concurix_blacklisted ) { return ; } if ( ! rules . wrapKey ( key ) ) { blacklist ( obj [ key ] ) ; return ; } if ( util . isFunction ( desc . value ) && ! wrap . isWrapper ( obj [ key ] ) && rules . wrapKey ( key ) ) { obj [ key ] = wrap ( obj [ key ] ) . before ( hooks . beforeHook ) . after ( hooks . afterHook ) . module ( name ) . state ( state ) . nameIfNeeded ( key ) . getProxy ( ) ; } else if ( util . isObject ( desc . value ) && ! wrap . isWrapper ( obj [ key ] ) && rules . wrapKey ( key ) ) { wrapFunctions ( name , desc . value , 0 , hooks , state , rules ) ; } } ) ; if ( protoLevel != 0 ) { protoLevel -- ; var proto = Object . getPrototypeOf ( obj ) ; wrapFunctions ( name , proto , protoLevel , hooks , state , rules ) ; } }
language : java . private void removeLowerDimension ( Geometry geometry , List < Geometry > result , int dimension ) { for ( int i = 0 ; i < geometry . getNumGeometries ( ) ; i ++ ) { Geometry g = geometry . getGeometryN ( i ) ; if ( g instanceof GeometryCollection ) { removeLowerDimension ( g , result , dimension ) ; } else if ( g . getDimension ( ) >= dimension ) { result . add ( g ) ; } } }
